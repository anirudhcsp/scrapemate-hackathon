import { Page, Project } from '../lib/supabase'

export interface ReportData {
  project: Project
  pages: Page[]
  generatedAt: string
}

export const generateReport = (project: Project, pages: Page[]): ReportData => {
  return {
    project,
    pages,
    generatedAt: new Date().toISOString()
  }
}

export const downloadReportAsJSON = (reportData: ReportData) => {
  const jsonString = JSON.stringify(reportData, null, 2)
  const blob = new Blob([jsonString], { type: 'application/json' })
  const url = URL.createObjectURL(blob)
  
  const link = document.createElement('a')
  link.href = url
  link.download = `scrapemate-report-${reportData.project.name || 'project'}-${new Date().toISOString().split('T')[0]}.json`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}

export const downloadReportAsMarkdown = (reportData: ReportData) => {
  const { project, pages, generatedAt } = reportData
  
  let markdown = `# ScrapeMate Analysis Report\n\n`
  markdown += `**Project:** ${project.name || 'Untitled Project'}\n`
  markdown += `**URL:** ${project.seed_url}\n`
  markdown += `**Status:** ${project.status}\n`
  markdown += `**Created:** ${new Date(project.created_at).toLocaleDateString()}\n`
  markdown += `**Report Generated:** ${new Date(generatedAt).toLocaleDateString()}\n`
  markdown += `**Pages Scraped:** ${pages.length}\n\n`
  
  markdown += `---\n\n`
  
  if (pages.length === 0) {
    markdown += `No pages were scraped for this project.\n`
  } else {
    markdown += `## Scraped Pages\n\n`
    
    pages.forEach((page, index) => {
      markdown += `### ${index + 1}. ${page.title || 'Untitled Page'}\n\n`
      markdown += `**URL:** ${page.url}\n`
      markdown += `**Scraped:** ${new Date(page.created_at).toLocaleDateString()}\n\n`
      
      if (page.content_md) {
        markdown += `**Content:**\n\n`
        markdown += `${page.content_md}\n\n`
      }
      
      markdown += `---\n\n`
    })
  }
  
  markdown += `\n*Report generated by ScrapeMate on ${new Date(generatedAt).toLocaleString()}*\n`
  
  const blob = new Blob([markdown], { type: 'text/markdown' })
  const url = URL.createObjectURL(blob)
  
  const link = document.createElement('a')
  link.href = url
  link.download = `scrapemate-report-${project.name || 'project'}-${new Date().toISOString().split('T')[0]}.md`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}

export const downloadReportAsCSV = (reportData: ReportData) => {
  const { project, pages } = reportData
  
  let csv = 'Title,URL,Content Length,Scraped Date\n'
  
  pages.forEach(page => {
    const title = (page.title || 'Untitled').replace(/"/g, '""')
    const url = page.url.replace(/"/g, '""')
    const contentLength = page.content_md ? page.content_md.length : 0
    const scrapedDate = new Date(page.created_at).toLocaleDateString()
    
    csv += `"${title}","${url}",${contentLength},"${scrapedDate}"\n`
  })
  
  const blob = new Blob([csv], { type: 'text/csv' })
  const url = URL.createObjectURL(blob)
  
  const link = document.createElement('a')
  link.href = url
  link.download = `scrapemate-report-${project.name || 'project'}-${new Date().toISOString().split('T')[0]}.csv`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}