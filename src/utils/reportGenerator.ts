import { Page, Project } from '../lib/supabase'
import { ExecutiveBrief } from '../lib/supabase'

export interface ReportData {
  project: Project
  pages: Page[]
  executiveBrief?: ExecutiveBrief | null
  generatedAt: string
}

export const generateReport = (project: Project, pages: Page[], executiveBrief?: ExecutiveBrief | null): ReportData => {
  return {
    project,
    pages,
    executiveBrief,
    generatedAt: new Date().toISOString()
  }
}

export const downloadReportAsMarkdown = (reportData: ReportData) => {
  const { project, pages, executiveBrief, generatedAt } = reportData
  
  const cleanContent = (content: string): string => {
    if (!content) return 'No information available for this section.'
    
    let parsedContent = content
    if (content.trim().startsWith('{') || content.trim().startsWith('"')) {
      try {
        const parsed = JSON.parse(content)
        if (typeof parsed === 'object') {
          parsedContent = Object.values(parsed).join('\n\n')
        } else if (typeof parsed === 'string') {
          parsedContent = parsed
        }
      } catch (e) {
        parsedContent = content
          .replace(/^["']|["']$/g, '')
          .replace(/\\n/g, '\n')
          .replace(/\\"/g, '"')
          .replace(/^\{|\}$/g, '')
          .replace(/"[^"]*":\s*"/g, '')
          .replace(/",\s*"/g, '\n\n')
          .replace(/"/g, '')
      }
    }
    
    return parsedContent
      .replace(/\\n/g, '\n')
      .replace(/\\"/g, '"')
      .replace(/\n\s*\n\s*\n/g, '\n\n')
      .trim()
  }
  
  let markdown = `# ScrapeMate Analysis Report\n\n`
  markdown += `**Professional Website Analysis & Business Intelligence**\n\n`
  markdown += `---\n\n`
  markdown += `## Project Information\n\n`
  markdown += `**Project:** ${project.name || 'Untitled Project'}\n`
  markdown += `**URL:** ${project.seed_url}\n`
  markdown += `**Status:** ${project.status}\n`
  markdown += `**Created:** ${new Date(project.created_at).toLocaleDateString()}\n`
  markdown += `**Report Generated:** ${new Date(generatedAt).toLocaleDateString()}\n`
  markdown += `**Pages Scraped:** ${pages.length}\n\n`
  
  markdown += `---\n\n`
  
  // Add Executive Brief if available
  if (executiveBrief) {
    markdown += `## Executive Brief\n\n`
    markdown += `*AI-Generated Business Intelligence Analysis*\n\n`
    
    if (executiveBrief.company_overview) {
      markdown += `### Company Overview\n\n`
      markdown += `${cleanContent(executiveBrief.company_overview)}\n\n`
    }
    
    if (executiveBrief.products_services) {
      markdown += `### Products & Services\n\n`
      markdown += `${cleanContent(executiveBrief.products_services)}\n\n`
    }
    
    if (executiveBrief.business_model) {
      markdown += `### Business Model\n\n`
      markdown += `${cleanContent(executiveBrief.business_model)}\n\n`
    }
    
    if (executiveBrief.target_market) {
      markdown += `### Target Market\n\n`
      markdown += `${cleanContent(executiveBrief.target_market)}\n\n`
    }
    
    if (executiveBrief.key_insights) {
      markdown += `### Key Insights\n\n`
      markdown += `${cleanContent(executiveBrief.key_insights)}\n\n`
    }
    
    if (executiveBrief.competitive_positioning) {
      markdown += `### Competitive Positioning\n\n`
      markdown += `${cleanContent(executiveBrief.competitive_positioning)}\n\n`
    }
    
    markdown += `---\n\n`
  }
  
  // Add scraped pages summary
  if (pages.length === 0) {
    markdown += `## Scraped Pages Summary\n\n`
    markdown += `*No pages were scraped for this project.*\n`
  } else {
    markdown += `## Scraped Pages Summary\n\n`
    
    pages.forEach((page, index) => {
      markdown += `### ${index + 1}. ${page.title || 'Untitled Page'}\n\n`
      markdown += `**URL:** ${page.url}\n`
      markdown += `**Scraped:** ${new Date(page.created_at).toLocaleDateString()}\n\n`
      
      if (page.content_md) {
        markdown += `**Content Preview:**\n\n`
        markdown += `${page.content_md.substring(0, 500)}${page.content_md.length > 500 ? '...' : ''}\n\n`
      }
      
      markdown += `---\n\n`
    })
  }
  
  // Add footer
  markdown += `\n---\n\n`
  markdown += `*Report generated by ScrapeMate on ${new Date(generatedAt).toLocaleString()}*\n`
  markdown += `*Professional Website Analysis & Business Intelligence Platform*\n`
  
  const blob = new Blob([markdown], { type: 'text/markdown' })
  const url = URL.createObjectURL(blob)
  
  const link = document.createElement('a')
  link.href = url
  link.download = `scrapemate-report-${project.name || 'project'}-${new Date().toISOString().split('T')[0]}.md`
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}